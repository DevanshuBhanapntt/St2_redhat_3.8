---
version: 1.0
description: Gather CPU utilization information for the given VM and CPU name
#platform: Windows

input:
  - assignment_group
  - ci_address
  - cpu_name
  - cpu_type
  - customer_abbr
  - customer_name
  - detailed_desc
  - dns_domain
  - inc_number
  - incident_state
  - inc_sys_id
  - max_failures
  - os_type
  - recheck_limit
  - short_desc
  - sleep_interval
  - threshold_percent
  - rec_short_desc
  - rec_detailed_desc
  - configuration_item_name
  - top_process_limit
  - ssh_password_key
  - ssh_username_key
  - ssh_tmp_dir_key
  - winrm_password_key
  - winrm_port_key
  - winrm_username_key
  - winrm_ssl_key
  - winrm_verify_ssl_key

vars:
  # Number of times the CPU is consecutively above the threshold
  - consecutive_fails: 0
  - cpu_info: ""
  - cpu_passed: true
  - cpu_percent_usage: null
  - end_timestamp: ""
  - error_message: ""
  - error_output: ""
  - recheck_total: 0
  - run_error: false
  - run_error_config: false
  - run_error_ping: false
  - start_timestamp: ""
  - uptime_value: null

output:
  - cpu_info: "{{ ctx().cpu_info }}"
  - cpu_percent_usage: "{{ ctx().cpu_percent_usage }}"
  # Append stdout to the end of the error message
  - error_message: "{{ ctx().error_message + ctx().error_output }}"

tasks:
  config_vars_get:
    action: ntt_monitoring.config_vars_get
    input:
      customer_abbr: "{{ ctx().customer_abbr }}"
      workflow_overrides:
        bolt_ssh_password_key: "{{ ctx().ssh_password_key }}"
        bolt_ssh_username_key: "{{ ctx().ssh_username_key }}"
        bolt_ssh_tmp_dir_key: "{{ ctx().ssh_tmp_dir_key }}"
        bolt_winrm_password_key: "{{ ctx().winrm_password_key }}"
        bolt_winrm_port_key: "{{ ctx().winrm_port_key }}"
        bolt_winrm_username_key: "{{ ctx().winrm_username_key }}"
        bolt_winrm_ssl_key: "{{ ctx().winrm_ssl_key }}"
        bolt_winrm_verify_ssl_key: "{{ ctx().winrm_verify_ssl_key }}"
        threshold_cpu_high: "{{ ctx().threshold_percent }}"
        max_failures: "{{ ctx().max_failures }}"
        sleep_interval: "{{ ctx().sleep_interval }}"
        recheck_limit: "{{ ctx().recheck_limit }}"
        cpu_top_process_limit: "{{ ctx().top_process_limit }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - ssh_password_key: "{{ result().result.connections.bolt_ssh_password_key if 'connections' in result().result and 'bolt_ssh_password_key' in result().result.connections else '' }}"
          - ssh_username_key: "{{ result().result.connections.bolt_ssh_username_key if 'connections' in result().result and 'bolt_ssh_username_key' in result().result.connections else '' }}"
          - ssh_tmp_dir_key: "{{ result().result.connections.bolt_ssh_tmp_dir_key if 'connections' in result().result and 'bolt_ssh_tmp_dir_key' in result().result.connections else '' }}"
          - winrm_password_key: "{{ result().result.connections.bolt_winrm_password_key if 'connections' in result().result and 'bolt_winrm_password_key' in result().result.connections else '' }}"
          - winrm_port_key: "{{ result().result.connections.bolt_winrm_port_key if 'connections' in result().result and 'bolt_winrm_port_key' in result().result.connections else '' }}"
          - winrm_username_key: "{{ result().result.connections.bolt_winrm_username_key if 'connections' in result().result and 'bolt_winrm_username_key' in result().result.connections else '' }}"
          - winrm_ssl_key: "{{ result().result.connections.bolt_winrm_ssl_key if 'connections' in result().result and 'bolt_winrm_ssl_key' in result().result.connections else '' }}"
          - winrm_verify_ssl_key: "{{ result().result.connections.bolt_winrm_verify_ssl_key if 'connections' in result().result and 'bolt_winrm_verify_ssl_key' in result().result.connections else '' }}"
          - threshold_percent: "{{ result().result.threshold_cpu_high if 'threshold_cpu_high' in result().result else '' }}"
          - max_failures: "{{ result().result.Win_cpu_max_failures | int if 'Win_cpu_max_failures' in result().result else '' }}"
          - sleep_interval: "{{ result().result.sleep_interval | int if 'sleep_interval' in result().result else '' }}"
          - recheck_limit: "{{ result().result.Win_cpu_recheck_limit | int if 'Win_cpu_recheck_limit' in result().result else '' }}"
          - top_process_limit: "{{ result().result.cpu_top_process_limit | int if 'cpu_top_process_limit' in result().result else '' }}"
          - pending_mins: "{{ result().result.Win_cpu_pending_mins | int }}"
          - start_timestamp: "{{ task('config_vars_get').start_timestamp }}"
        do:
          - check_incident_state
      - when: "{{ failed() }}"
        publish:
          - error_message: "Could not get connection info for {{ ctx().customer_abbr }} or default please check the config file and try again"
          - run_error_config: true
        do:
          - itsm_cleanup

  check_incident_state:
    action: core.noop
    next:
      - when: "{{ succeeded() and (ctx().incident_state == '2') }}"
        do:
          - ping_test        
      - when: "{{ succeeded() and (ctx().incident_state == '-5') }}"
        do:
          - incident_move_inprogress          
      - when: "{{ succeeded() and (ctx().incident_state not in ['2', '-5']) }}"
        do:
          - fail

  incident_move_inprogress:
    action: ntt_itsm.itsm_incident_update
    input:
      work_in_progress: true
      inc_id: "{{ ctx().inc_sys_id }}"  
      notes: "Incident assigned to Automation(Stackstorm). Work in progress.\n Automation Job ID: <% ctx(st2).action_execution_id %>"
    next:
      - when: "{{ succeeded() and ( ctx().incident_state == '-5') }}"
        do:
          - get_recheck_total         
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - itsm_cleanup 

  get_recheck_total:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "recheck_total"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "get"
    next:
      - when: "{{ succeeded()}}"
        publish:
          - recheck_total: "{{ result().result }}" 
        do:
          - get_consecutive_fails
          
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error getting the recheck_total value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup
          
  get_consecutive_fails:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "consecutive_fails"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "get"
    next:
      - when: "{{ succeeded()}}"
        publish:
          - consecutive_fails: "{{ result().result }}" 
        do:
          - check_recurrence
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error getting the consecutive_fails value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup

  ping_test:
    action: ntt_monitoring.unreachable_to_ping
    input:
      check_uptime: false
      ci_address: "{{ ctx().ci_address }}"
      close_incident: false
      inc_number: "{{ ctx().inc_number }}"
      inc_sys_id: "{{ ctx().inc_sys_id }}"
      insert_db: false
      os_type: "{{ ctx().os_type }}"
      exe_id: <% ctx(st2).action_execution_id %>
    next:
      - when: "{{ succeeded() }}"
        publish:
          - uptime_value: "{{ result().output.uptime_value }}"
        do:
          - check_recurrence
      - when: "{{ failed() }}"
        publish:
          - error_message: "{{ result().output.error_message }}"
          - run_error: true
          - run_error_ping: true
        do:
          - get_end_timestamp

  check_recurrence:
    action: ntt_itsm.itsm_recurrence_logic
    input:       
      inc_id: "{{ ctx().inc_number }}"
      rec_ds_key_name: "Win_cpu_Rec_logic_days"
      company_name: "{{ ctx().customer_name }}" 
      ci_name: "{{ ctx().configuration_item_name }}"
      short_desc: "{{ ctx().rec_short_desc }}"
      long_desc: "{{ ctx().rec_detailed_desc }}"      
    next:
      - when: "{{ succeeded() and result().result.Found_Recurrence }}"
        publish:
          - found_recurrence: "{{ result().result.Found_Recurrence }}"
          - found_recurrence_value: "{{ result().result.value }}"
          - found_recurrence_inc_cnt: "{{ result().result.Found_Recurrence_Inc_Cnt }}"
        do:
          - rec_itsm_update_check 
      - when: "{{ succeeded() and not result().result.Found_Recurrence }}"
        publish:
          - found_recurrence: "{{ result().result.Found_Recurrence }}"
          - found_recurrence_value: "{{ result().result.value }}"
          - found_recurrence_inc_cnt: "{{ result().result.Found_Recurrence_Inc_Cnt }}"
        do:
          - cpu_check 
          
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to get the recurrence details from ITSM incident {{ ctx().inc_number }}!"
        do:
          - itsm_cleanup

  rec_itsm_update_check:
    action: core.noop
    next:
      - when: "{{ succeeded() and (ctx().incident_state == '2') }}" 
        do:
          - rec_itsm_update_results
      - when: "{{ succeeded() and (ctx().incident_state == '-5') }}" 
        do:
          - cpu_check
     
  rec_itsm_update_results:
    action: ntt_itsm.itsm_incident_update
    input:          
      inc_id: "{{ ctx().inc_sys_id }}"      
      notes: "{{ ctx().found_recurrence_value }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - cpu_check
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the recurrence details in ITSM incident {{ ctx().inc_number }}!"
        do:
          - itsm_cleanup

  cpu_check:
    action: ntt_monitoring.bolt_plan
    input:
      server_fqdn: "{{ ctx().ci_address }}"
      os_type: "{{ ctx().os_type }}"
      plan: "ntt_monitoring::cpu_check"
      params:
        cpu_name: "{{ ctx().cpu_name }}"
        cpu_type: "{{ ctx().cpu_type }}"
        dns_domain: "{{ ctx().dns_domain }}"
        threshold_percent: "{{ ctx().threshold_percent | string }}"
        top_process_limit: "{{ ctx().top_process_limit }}"
      st2kv_config:
        ssh.password: "{{ ctx().ssh_password_key }}"
        ssh.user: "{{ ctx().ssh_username_key }}"
        ssh.tmpdir: "{{ ctx().ssh_tmp_dir_key }}"
        winrm.password: "{{ ctx().winrm_password_key }}"
        winrm.user: "{{ ctx().winrm_username_key }}"
        winrm.port: "{{ ctx().winrm_port_key }}"
        winrm.ssl: "{{ ctx().winrm_ssl_key }}"
        winrm.ssl-verify: "{{ ctx().winrm_verify_ssl_key }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - cpu_info: "{{ result().output.run.result.output }}"
          - cpu_percent_usage: "{{ result().output.run.result.cpu_percent_usage }}"
          - recheck_total: "{{ ctx().recheck_total + 1 }}"
          - run: "{{ result().output.run }}"
        do:
          - itsm_update_results
          - threshold_check
      - when: "{{ failed() and ctx().recheck_total < ( ctx().max_failures - 1 ) }}"
        publish:
          - consecutive_fails: 0
          - recheck_total: "{{ ctx().recheck_total + 1 }}"
          - cpu_info: "{{ result().output.run.result.details.result_set[0].value._error.msg + '\\n' }}"
          - error_message: |
              Automation is escalating this incident as it was unable to resolve it.
              
              {{ ctx().cpu_info }}
          - cpu_percent_usage: ""
        do:
          - itsm_escalate
      - when: "{{ failed() and ( ctx().recheck_total == ( ctx().max_failures - 1 ) or ctx().recheck_total >= ctx().max_failures) }}"
        publish:
          - error_message: "{{ result().output.run.result.details.result_set[0].value._error.msg }}"
          - run_error: true
          - run: "{{ result().output.run.result.details.result_set[0].value._error.msg }}"
        do:
          - itsm_cleanup

  itsm_update_results:
    action: ntt_itsm.itsm_incident_update
    input:
      work_in_progress: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().cpu_info }}"
    next:
      - when: "{{ completed() }}"
        do:
          - noop

  # This task keeps track of whether consecutive CPU checks are found to be under the threshold.
  threshold_check:
    action: ntt_monitoring.threshold_check
    input:
      check_value: true
      max_failures: "{{ ctx().max_failures }}"
      rerun_limit: "{{ ctx().recheck_limit }}"
      rerun_total: "{{ ctx().recheck_total }}"
      fail_check_counter: "{{ ctx().consecutive_fails }}"
      sleep_interval: 5
      threshold: "{{ ctx().threshold_percent }}"
      value: "{{ ctx().cpu_percent_usage }}"
    next:
      - when: "{{ succeeded() and result().result.rerun_action }}"
        publish:
          - consecutive_fails: "{{ result().result.fail_check_counter }}"
          - threshold_passed: "{{ result().result.threshold_passed }}"
        do:
          - add_recheck_total            
      - when: "{{ succeeded() and not result().result.threshold_passed  }}"
        publish:           
          - threshold_passed: "{{ result().result.threshold_passed }}"
        do:
          - add_consecutive_fails          
      - when: "{{ succeeded() and result().result.rerun_action }}" 
        publish:           
          - threshold_passed: "{{ result().result.threshold_passed }}"      
        do:
          - itsm_pending
      - when: "{{ succeeded() and not result().result.rerun_action }}"
        publish:
          - consecutive_fails: 0
          - threshold_passed: "{{ result().result.threshold_passed }}"
        do:
          - get_esc_reason
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error checking the threshold for ITSM incident {{ ctx().inc_number }}!.\n {{ ctx().error_message }} \n {{ ctx().error_output }}   "
          - run_error: true
        do:
          - itsm_cleanup

  add_recheck_total:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "recheck_total"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "add"
      update_key_value: 1
    next:
      - when: "{{ succeeded() and not ctx().threshold_passed }}"  
        do:
          - noop  
      - when: "{{ succeeded() and ctx().threshold_passed }}"  
        do:
          - remove_consecutive_fails           
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error adding the recheck_total value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup
          
  add_consecutive_fails:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "consecutive_fails"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "add"
      update_key_value: 1
    next:
      - when: "{{ succeeded()}}"       
        do:
          - noop
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error getting the consecutive_fails value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup

  get_esc_reason:
    action: core.noop
    next:
      - when: "{{ ctx().consecutive_fails == ctx().max_failures }}"
        publish:
          - max_threshold_failed: true
        do:
          - finish
      - when: "{{ ctx().consecutive_fails < ctx().max_failures }}"
        publish:
          - max_threshold_failed: false
        do:
          - finish
  
  itsm_pending:
    action: ntt_itsm.itsm_incident_update
    input:
      pending: true
      inc_id: "{{ ctx().inc_sys_id }}"
      pending_mins: "{{ ctx().pending_mins }}"     
    next:
      - when: "{{ succeeded() }}"
        publish:
          - am_status: "Pending"
        do:
          - remove_pending_ic_kv_var
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup

  finish:
    action: core.noop
    next:
      - when: "{{ succeeded() and ctx().threshold_passed and not ctx().found_recurrence and not ctx().max_threshold_failed }}"
        do:
          - itsm_close          
      - when: "{{ succeeded() and ctx().threshold_passed and ctx().found_recurrence and not ctx().max_threshold_failed }}"
        publish: 
          - error_message: "Automation is escalating this incident as it was unable to resolve it due to recurrence incidents. The CPU utilization for {{ ctx().ci_address }} is below the threshold({{ ctx().threshold_percent }}%) and current utilization is {{ ctx().cpu_percent_usage }}%"
        do:
          - itsm_escalate_recurrence
      - when: "{{ succeeded() and ctx().threshold_passed and ctx().found_recurrence and ctx().max_threshold_failed }}"
        publish: 
          - cpu_passed: false
          - error_message: "Automation is escalating this incident as it was unable to resolve it due to recurrence incidents. And the CPU utilization for {{ ctx().ci_address }} is above the threshold ({{ ctx().threshold_percent }}%) for {{ ctx().max_failures }} times and is currently {{ ctx().cpu_percent_usage }}%"
        do:
          - itsm_escalate_recurrence         
      - when: "{{ succeeded() and not ctx().threshold_passed and not ctx().found_recurrence and not ctx().max_threshold_failed }}"
        publish:
          - error_message: "The CPU utilization for {{ ctx().ci_address }} is above the threshold({{ ctx().threshold_percent }}%) and is currently {{ ctx().cpu_percent_usage }}%"
          - cpu_passed: false
        do:
          - itsm_escalate         
      - when: "{{ succeeded() and not ctx().threshold_passed and ctx().found_recurrence and ctx().max_threshold_failed }}"
        publish: 
          - cpu_passed: false
          - error_message: "Automation is escalating this incident as it was unable to resolve it due to recurrence incidents. And the CPU utilization for {{ ctx().ci_address }} is above the threshold({{ ctx().threshold_percent }}%) for {{ ctx().max_failures }} times and is currently {{ ctx().cpu_percent_usage }}%"
        do:
          - itsm_escalate_recurrence
      - when: "{{ succeeded() and not ctx().threshold_passed and ctx().found_recurrence and not ctx().max_threshold_failed }}"
        publish: 
          - cpu_passed: false
          - error_message: "Automation is escalating this incident as it was unable to resolve it due to recurrence incidents. The CPU utilization for {{ ctx().ci_address }} is above the threshold({{ ctx().threshold_percent }}%) and is currently {{ ctx().cpu_percent_usage }}%"
        do:
          - itsm_escalate

  
  itsm_escalate_recurrence:
    action: ntt_itsm.itsm_incident_update
    input:
      escalate: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().error_message }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - am_status: "Failure"
        do:
          - get_end_timestamp
          - remove_recheck_total
          - remove_consecutive_fails
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup   

  itsm_close:
    action: ntt_itsm.itsm_incident_update
    input:
      close: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "Automation is resolving the incident. See work log for details."
    next:
      - when: "{{ succeeded() }}"
        do:
          - update_kv_var
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - itsm_cleanup

  itsm_cleanup:
    action: ntt_itsm.itsm_incident_update
    input:
      escalate: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().error_message }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - get_end_timestamp
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - get_end_timestamp

  remove_pending_ic_kv_var:
    action: ntt_itsm.itsm_processing_pending_incs_remove
    input:
      inc_id: "{{ ctx().inc_number }}"
    next:
      - when: "{{ succeeded() and not ctx().run_error }}"
        do:
          - noop
      - when: "{{ succeeded() and ( ctx().run_error or not ctx().cpu_passed ) }}"
        do:
          - fail 

  update_kv_var:
    action: ntt_itsm.itsm_processing_incs_remove
    input:
      inc_id: "{{ ctx().inc_number }}"
    next:
      - when: "{{ completed() }}"
        do:
          - get_end_timestamp

  itsm_escalate:
    action: ntt_itsm.itsm_incident_update
    input:
      escalate: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().error_message }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - get_end_timestamp
          - remove_recheck_total
          - remove_consecutive_fails
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - itsm_cleanup

  get_end_timestamp:
    action: core.noop
    next:
      - when: "{{ succeeded() and ctx().run_error_ping }}"
        publish:
          - end_timestamp: "{{ task('ping_test').end_timestamp }}"
        do:
          - insert_db
      - when: "{{ succeeded() and not ctx().run_error_ping }}"
        publish:
          - end_timestamp: "{{ task('cpu_check').end_timestamp }}"
        do:
          - insert_db

  insert_db:
    action: ntt_monitoring.sql_insert
    input:
      metric_data:
        Description: "cpu_check"
        Status: "{{ 'Failure' if ( ctx().run_error or not ctx().cpu_passed ) else 'Success' }}"
      process_data:
        Account_Name: "{{ ctx().customer_name }}"
        AM_Desc: |
          {% if not ctx().run_error and ctx().cpu_passed %}
          CPU utilization is at {{ ctx().cpu_percent_usage }}% and is under the threshold {{ ctx().threshold_percent}}%
          {% endif %}
          {% if not ctx().cpu_passed %}
          {{ ctx().error_message }}
          {{ ctx().cpu_info }}
          {% endif %}
          {% if ctx().run_error %}
          {{ ctx().error_message }}
          {% endif %}
        AM_Status: "{{ 'Failure' if ( ctx().run_error or not ctx().cpu_passed ) else 'Success' }}"
        Configuration_Item: "{{ ctx().ci_address }}"
        ITSM_Name: "servicenow"
        Job_ID: <% ctx(st2).action_execution_id %>
        Module_Name: "cpu_check"
        Ref_No: "{{ ctx().inc_number }}"
        Tower_Name: "Windows"
        Assignment_Group: "{{ ctx().assignment_group }}"
        Short_Desc: "{{ ctx().short_desc }}"
        Detail_Desc: "{{ ctx().detailed_desc }}"
      end_timestamp: "{{ ctx().end_timestamp }}"
      start_timestamp: "{{ ctx().start_timestamp }}"
      account_name: "{{ ctx().customer_name }}"
      account_service: "{{ ctx().customer_name }}"
      incident_id: "{{ ctx().inc_number }}"
      configuration_item: "{{ ctx().ci_address }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - noop
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error inserting into the database. Please see the execution for details."
        do:
          - fail

  remove_recheck_total:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "recheck_total"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "remove"      
    next:
      - when: "{{ succeeded()}}"      
        do:
          - remove_consecutive_fails          
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error remove the recheck_total value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup
          
  remove_consecutive_fails:
    action: ntt_monitoring.update_kv_dict
    input:
      st2_key_name: "consecutive_fails"       
      Find_key_field: "{{ ctx().inc_number }}"
      update_key_value_oper: "remove"      
    next:
      - when: "{{ succeeded()}}"       
        do:
          - noop
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error remove the consecutive_fails value from datastore {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - itsm_cleanup  
