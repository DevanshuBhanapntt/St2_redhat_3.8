version: 1.0
description: "This workflow is used to determine if the CI to be tested can be reached by ping and if the uptime is a desirable amount"
#platform: Windows/Unix
# Datastore keys: unix_hostdown_Rec_logic_days, Win_hostdown_Rec_logic_days, unix_ping_recheck_limit, win_ping_recheck_limit

input:
  - assignment_group
  - check_uptime
  - ci_address
  - close_incident
  - customer_abbr
  - customer_name
  - detailed_desc
  - inc_number
  - inc_sys_id
  - insert_db
  - os_type
  - ping_count
  - recheck_limit
  - short_desc
  - sleep_interval
  - ssh_password
  - ssh_username
  - uptime_threshold
  - winrm_password
  - winrm_port
  - winrm_scheme
  - winrm_username
  - winrm_verify_ssl
  - configuration_item_name
  - rec_short_desc
  - rec_detailed_desc
  - exe_id

vars:
  - end_timestamp: ""
  - error_message: ""
  - ping_result: ""
  - recheck_total: 0
  - run_error: false
  - run_error_ping: false
  - run_error_cmd_ping: false
  - run_error_uptime: false
  - start_timestamp: ""
  # The number of days the device has been up
  - uptime_days: 0
  - uptime_value: ""
  - found_recurrence_inc_cnt: 0
  - found_recurrence: false
  - found_recurrence_value: ""
  - am_status: "Failure"
  - reboot_event_check: false
  - eventid_check: 'false'
  - host_down_rec_days_key: ''
  - recheck_limit_key: ''
  - execution_id: ''

output:
  - error_message: "{{ ctx().error_message }}"
  - uptime_days: "{{ ctx().uptime_days }}"
  - uptime_value: "{{ ctx().uptime_value }}"
  - ping_result: "{{ ctx().ping_result }}"
  - run_error_uptime: "{{ ctx().run_error_uptime }}"
  - found_recurrence: "{{ ctx().found_recurrence }}"
  - ci_address: "{{ ctx().ci_address }}"

tasks:
  config_vars_get:
    action: ntt_monitoring.config_vars_get
    input:
      customer_abbr: "{{ ctx().customer_abbr }}"
      workflow_overrides:
        ping_count: "{{ ctx().ping_count }}"
        ssh_password: "{{ ctx().ssh_password }}"
        ssh_username: "{{ ctx().ssh_username }}"
        uptime_threshold: "{{ ctx().uptime_threshold }}"
        winrm_password: "{{ ctx().winrm_password }}"
        winrm_port: "{{ ctx().winrm_port }}"
        winrm_scheme: "{{ ctx().winrm_scheme }}"
        winrm_username: "{{ ctx().winrm_username }}"
        winrm_verify_ssl: "{{ ctx().winrm_verify_ssl }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - db_drivername: "{{ result().result.db_drivername if 'db_drivername' in result().result else '' }}"
          - db_host: "{{ result().result.db_host if 'db_host' in result().result else '' }}"
          - db_name: "{{ result().result.db_name if 'db_name' in result().result else '' }}"
          - db_password: "{{ result().result.db_password if 'db_password' in result().result else '' }}"
          - db_username: "{{ result().result.db_username if 'db_username' in result().result else '' }}"
          - ssh_password: "{{ result().result.connections.ssh_password if 'connections' in result().result and 'ssh_password' in result().result.connections else '' }}"
          - ssh_username: "{{ result().result.connections.ssh_username if 'connections' in result().result and 'ssh_username' in result().result.connections else '' }}"
          - winrm_password: "{{ result().result.connections.winrm_password if 'connections' in result().result and 'winrm_password' in result().result.connections else '' }}"
          - winrm_port: "{{ result().result.connections.winrm_port if 'connections' in result().result and 'winrm_port' in result().result.connections else '' }}"
          - winrm_scheme: "{{ result().result.connections.winrm_scheme if 'connections' in result().result and 'winrm_scheme' in result().result.connections else '' }}"
          - winrm_username: "{{ result().result.connections.winrm_username if 'connections' in result().result and 'winrm_username' in result().result.connections else '' }}"
          - winrm_verify_ssl: "{{ result().result.connections.winrm_verify_ssl if 'connections' in result().result and 'winrm_verify_ssl' in result().result.connections else '' }}"
          - uptime_threshold: "{{ result().result.threshold_uptime_low | int if 'threshold_uptime_low' in result().result else '' }}"
          - sleep_interval: "{{ result().result.sleep_interval | int if 'sleep_interval' in result().result else '' }}"
          - recheck_limit: "{{ result().result.recheck_limit | int if 'recheck_limit' in result().result else '' }}"
          - ping_count: "{{ result().result.ping_count | int if 'ping_count' in result().result else '' }}"
          - start_timestamp: "{{ task('config_vars_get').start_timestamp }}"
        do:
          - get_exe_id
      - when: "{{ failed() }}"
        publish:
          - error_message: "Could not get connection info for {{ ctx().customer_abbr }} or default please check the config file and try again"
          - run_error: true
        do:
          - db_dispatch

  get_exe_id:
    action: core.noop
    next:
      - when: "{{ succeeded() and not ctx().close_incident and ctx().exe_id }}"
        publish:
          - execution_id: "{{ ctx().exe_id }}"
        do:
          - itsm_begin
      - when: "{{ succeeded() and not ctx().close_incident and not ctx().exe_id }}"
        publish:
          - execution_id: <% ctx(st2).action_execution_id %>
        do:
          - itsm_begin
      - when: "{{ succeeded() and ctx().close_incident and not ctx().exe_id }}"
        publish:
          - execution_id: <% ctx(st2).action_execution_id %>
        do:
          - itsm_begin

  itsm_begin:
    action: ntt_itsm.itsm_incident_update
    input:
      work_in_progress: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "Incident assigned to Automation(Stackstorm). Work in progress.\n Automation Job ID: {{ ctx().execution_id }}"
    next:
      - when: "{{ succeeded() and not ctx().close_incident }}"
        do:
          - ping_test
      - when: "{{ succeeded() and ctx().close_incident }}"
        do:
          - decide_rec_key
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - db_dispatch


  decide_rec_key:
    action: core.noop
    next:
      - when: "{{ succeeded() and ctx().os_type == 'linux' }}"
        publish:
          - host_down_rec_days_key: "unix_hostdown_Rec_logic_days"
          - recheck_limit: <% st2kv('system.unix_ping_recheck_limit') %>
        do:
          - check_recurrence
      - when: "{{ succeeded() and ctx().os_type == 'windows' }}"
        publish:
          - host_down_rec_days_key: "Win_hostdown_Rec_logic_days"
          - recheck_limit: <% st2kv('system.win_ping_recheck_limit') %>
        do:
          - check_recurrence


  check_recurrence:
    action: ntt_itsm.itsm_recurrence_logic
    input:
      inc_id: "{{ ctx().inc_number }}"
      rec_ds_key_name: "{{ ctx().host_down_rec_days_key }}"
      company_name: "{{ ctx().customer_name }}"
      ci_name: "{{ ctx().configuration_item_name }}"
      short_desc: "{{ ctx().rec_short_desc }}"
      long_desc: "{{ ctx().ci_address }}"
    next:
      - when: "{{ succeeded() and result().result.Found_Recurrence }}"
        publish:
          - found_recurrence: "{{ result().result.Found_Recurrence }}"
          - found_recurrence_value: "{{ result().result.value }}"
          - found_recurrence_inc_cnt: "{{ result().result.Found_Recurrence_Inc_Cnt }}"
        do:
          - rec_itsm_update_results
      - when: "{{ succeeded() and not result().result.Found_Recurrence }}"
        publish:
          - found_recurrence: "{{ result().result.Found_Recurrence }}"
          - found_recurrence_value: "{{ result().result.value }}"
          - found_recurrence_inc_cnt: "{{ result().result.Found_Recurrence_Inc_Cnt }}"
        do:
          - rec_itsm_update_results
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to get the recurrence details from ITSM incident {{ ctx().inc_number }}!"
        do:
          - db_dispatch

  rec_itsm_update_results:
    action: ntt_itsm.itsm_incident_update
    input:
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().found_recurrence_value }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - ping_test
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the recurrence details in ITSM incident {{ ctx().inc_number }}!"
        do:
          - db_dispatch

  ping_test:
    action: core.local
    input:
      cmd: "ping -c {{ ctx().ping_count }} {{ ctx().ci_address }}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - end_timestamp: "{{ task('ping_test').end_timestamp }}"
          - ping_result: "{{ result().stdout }}"
          - run_error_cmd_ping: false
        do:
          - itsm_update_results
      - when: "{{ failed() }}"
        publish:
          - end_timestamp: "{{ task('ping_test').end_timestamp }}"
          - ping_result: "{{ result().stdout if result().stdout != '' else result().stderr }}"
          - run_error_cmd_ping: true
        do:
          - itsm_update_results

  itsm_update_results:
    action: ntt_itsm.itsm_incident_update
    input:
      work_in_progress: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().ping_result }}"
    next:
      - when: "{{ completed() and not ctx().run_error_cmd_ping }}"
        do:
          - uptime_dispatch
      - when: "{{ completed() and ctx().run_error_cmd_ping }}"
        do:
          - threshold_check

  threshold_check:
    action: ntt_monitoring.threshold_check
    input:
      check_value: false
      rerun_limit: "{{ ctx().recheck_limit }}"
      rerun_total: "{{ ctx().recheck_total }}"
      sleep_interval: "{{ ctx().sleep_interval }}"
      timeout: "{{ ctx().sleep_interval + 30 }}"
    next:
      - when: "{{ succeeded() and result().result.rerun_action }}"
        publish:
          - recheck_total: "{{ ctx().recheck_total + 1 }}"
        do:
          - ping_test
      - when: "{{ succeeded() and not result().result.rerun_action }}"
        publish:
          - error_message: "Device {{ ctx().ci_address }} could not be reached by ping"
          - run_error_ping: true
          - run_error: true
        do:
          - itsm_escalate
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error checking the threshold for ITSM incident {{ ctx().inc_number }}!"
          - run_error: true
          - run_error_ping: true
        do:
          - itsm_escalate

  uptime_dispatch:
    action: core.noop
    next:
      - when: "{{ succeeded() and ctx().check_uptime }}"
        do:
          - ping_success_delay
      - when: "{{ succeeded() and not ctx().check_uptime and ctx().close_incident }}"
        do:
          - itsm_close
      - when: "{{ succeeded() and not ctx().check_uptime and not ctx().close_incident }}"
        do:
          - db_dispatch

  ping_success_delay:
    action: core.pause
    input:
      max_pause: 180
    next:
      - when: "{{ ctx().os_type == 'windows' }}"
        do:
          - get_uptime_windows
      - when: "{{ ctx().os_type == 'linux' }}"
        do:
          - get_uptime_linux

  get_uptime_windows:
    action: core.winrm_ps_cmd
    input:
      host: "{{ ctx().ci_address }}"
      password: "{{ ctx().winrm_password }}"
      username: "{{ ctx().winrm_username }}"
      verify_ssl_cert: "{{ ctx().winrm_verify_ssl }}"
      port: "{{ ctx().winrm_port | int }}"
      scheme: "{{ ctx().winrm_scheme }}"
      # The following command will return the uptime in "x days, y hours, z minutes" format
      cmd: "$OS=Get-WmiObject win32_operatingsystem;$BootTime=$OS.ConvertToDateTime($OS.LastBootUpTime);$Uptime=$OS.ConvertToDateTime($OS.LocalDateTime)-$BootTime;$Uptime | ForEach-Object{ Write-Host $_.Days days, $_.Hours hours, $_.Minutes minutes}"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - uptime_value: "{{ result().stdout | trim }}"
          - uptime_days: "{{ result().stdout.split(' ')[0] | int }}"
        do:
          - itsm_update_uptime
      - when: "{{ failed() and 'stderr' in result() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - error_message: "Automation not able to connect to {{ ctx().ci_address }}.\n {{ result().stdout }} \n {{ result().stderr }}"
          - run_error: true
          - run_error_uptime: true
        do:
          - itsm_escalate
      - when: "{{ failed() and 'error' in result() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_windows').end_timestamp }}"
          - error_message: "Automation not able to connect to {{ ctx().ci_address }}. \n {{ result().error }}"
          - run_error: true
          - run_error_uptime: true
        do:
          - itsm_escalate

  get_uptime_linux:
    action: core.remote
    input:
      hosts: "{{ ctx().ci_address }}"
      password: "{{ ctx().ssh_password }}"
      username: "{{ ctx().ssh_username }}"
      # The following command will return the uptime in "x days, y hours, z minutes" format
      cmd: "uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7==\"min\") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,\"days,\",h+0,\"hours,\",m+0,\"minutes\"}'"
    next:
      - when: "{{ succeeded() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_linux').end_timestamp }}"
          - uptime_value: "{{ result()[ctx().ci_address].stdout }}"
          - uptime_days: "{{ result()[ctx().ci_address].stdout.split(' ')[0] | int }}"
        do:
          - itsm_update_uptime
      - when: "{{ failed() }}"
        publish:
          - end_timestamp: "{{ task('get_uptime_linux').end_timestamp }}"
          - error_message: "Could not connect to {{ ctx().ci_address }}"
          - uptime_value: "NA(Error: {{ ctx().error_message }})"
          - run_error: true
          - run_error_uptime: true
        do:
          - itsm_update_uptime

  itsm_update_uptime:
    action: ntt_itsm.itsm_incident_update
    input:
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "Uptime value for: {{ ctx().ci_address }} is {{ ctx().uptime_value }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - check_system_uptime
      - when: "{{ failed() }}"
        do:
          - db_dispatch

  check_system_uptime:
    action: core.noop
    next:
      - when: "{{ 'windows' in ctx().os_type | lower and 'system up time' in ctx().short_desc | lower }}"
        do:
          - check_reboot_event
      - when: "{{ 'windows' in ctx().os_type | lower and 'system up time' not in ctx().short_desc | lower }}"
        do:
          - finish_login_success
      - when: "{{ 'windows' not in ctx().os_type | lower }}"
        do:
          - finish

  check_reboot_event:
    action: core.winrm_ps_cmd
    input:
      host: "{{ ctx().ci_address }}"
      password: "{{ ctx().winrm_password }}"
      username: "{{ ctx().winrm_username }}"
      verify_ssl_cert: "{{ ctx().winrm_verify_ssl }}"
      port: "{{ ctx().winrm_port | int }}"
      scheme: "{{ ctx().winrm_scheme }}"
      cmd: $minutes=120 ; $time = [System.Management.ManagementDateTimeConverter]::ToDmtfDateTime((Get-Date).AddMinutes(-$minutes)) ; $eventID="1074,1076,6008,6006,6009" ; $eventID = $eventID.split(',') ; foreach ($i in $eventID) { $filter = "SELECT * FROM Win32_NTLogEvent WHERE (logfile='System') AND (TimeGenerated>='" + $time + "') and (eventcode=" + $i +")" ; get-wmiobject -query $filter | select-object -first 1 }
    next:
      - when: "{{ succeeded() and ('1074' in result().stdout or '6006' in result().stdout or '6009' in result().stdout) and '1076' not in result().stdout and '6008' not in result().stdout }}"
        publish:
          - end_timestamp: "{{ task('check_reboot_event').end_timestamp }}"
          - eventid_out: "{{ result().stdout }}"
          - eventid_check: 'true'
          - work_note: |
                  Pinged device and checked Event IDs for possible errors. Event logs in last 120 minutes indicate a normal reboot.

                  {{ ctx().eventid_out }}
        do:
          - itsm_update_reboot
          - reboot_finish
      - when: "{{ succeeded() and result().stdout | trim == '' and 'Exception' not in result().stderr }}"
        publish:
          - end_timestamp: "{{ task('check_reboot_event').end_timestamp }}"
          - eventid_out: "{{ result().stdout }}"
          - eventid_check: 'true'
          - work_note: |
                  Pinged device and checked Event IDs for possible errors. No event logs were found (false positive) in last 120 minutes.

                  {{ ctx().eventid_out }}
        do:
          - itsm_update_reboot
          - reboot_finish
      - when: "{{ succeeded() and ('1076' in result().stdout or '6008' in result().stdout) }}"
        publish:
          - end_timestamp: "{{ task('check_reboot_event').end_timestamp }}"
          - eventid_out: "{{ result().stdout }}"
          - eventid_check: 'false'
          - work_note: |
                  Pinged device and checked Event IDs for possible errors.
                  One of the following event ID's was found:1076 or 6008.  This indicates an unexpected shutdown.

                  {{ ctx().eventid_out }}
        do:
          - itsm_update_reboot
          - reboot_finish
      - when: "{{ failed() and 'stderr' in result() }}"
        publish:
          - end_timestamp: "{{ task('check_reboot_event').end_timestamp }}"
          - error_message: "Automation not able to check the reboot event of {{ ctx().ci_address }} to validate restart type.\n {{ result().stdout }} \n {{ result().stderr }}"
          - eventid_check: 'false'
        do:
          - itsm_escalate
      - when: "{{ failed() and 'error' in result() }}"
        publish:
          - end_timestamp: "{{ task('check_reboot_event').end_timestamp }}"
          - error_message: "Automation not able to check the reboot event of {{ ctx().ci_address }} to validate restart type.\n {{ result().stdout }} \n {{ result().error }}"
          - eventid_check: 'false'
        do:
          - itsm_escalate


  itsm_update_reboot:
    action: ntt_itsm.itsm_incident_update
    input:
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "{{ ctx().work_note }}"
    next:
      - when: "{{ succeeded() }}"
        do:
          - noop
      - when: "{{ failed() }}"
        do:
          - db_dispatch

  reboot_finish:
    action: core.noop
    next:
      - when: "{{ ctx().eventid_check == 'true' and ctx().found_recurrence }}"
        publish:
          - error_message: "Pinged device and checked Event IDs for possible errors. Automation is escalating the ticket because of recurrence. See work log for details."
        do:
          - itsm_escalate
      - when: "{{ ctx().eventid_check == 'true' and not ctx().found_recurrence }}"
        do:
          - itsm_close
      - when: "{{ ctx().eventid_check == 'false' and ctx().found_recurrence }}"
        publish:
          - error_message: "Pinged device, unexpected shutdown and recurrence tickets found. See work log for details."
        do:
          - itsm_escalate
      - when: "{{ ctx().eventid_check == 'false' and not ctx().found_recurrence }}"
        publish:
          - error_message: ""
        do:
          - itsm_escalate


  finish_login_success:
    action: core.noop
    next:
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_value != '' and ctx().found_recurrence and ctx().close_incident }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
          - error_message: "Uptime value: {{ ctx().uptime_days }}"
          - run_error: true
        do:
          - itsm_escalate_recurrence
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_value != '' and ctx().close_incident and not ctx().found_recurrence }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
        do:
          - itsm_close
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_value != '' and not ctx().close_incident }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
        do:
          - db_dispatch
      - when: "{{ ctx().run_error_uptime }}"
        publish:
          - error_message: "Automation failed to fetch uptime of ci {{ ctx().ci_address }}"
        do:
          - itsm_escalate

  finish:
    action: core.noop
    next:
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_days < ctx().uptime_threshold and not ctx().found_recurrence }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
          - error_message: "Uptime value: {{ ctx().uptime_days }} days is less than the threshold"
          - run_error: true
        do:
          - itsm_escalate
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_days < ctx().uptime_threshold and ctx().found_recurrence }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
          - error_message: "Uptime value: {{ ctx().uptime_days }} days is less than the threshold"
          - run_error: true
        do:
          - itsm_escalate_recurrence
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_days >= ctx().uptime_threshold and ctx().close_incident and not ctx().found_recurrence }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
        do:
          - itsm_close
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_days >= ctx().uptime_threshold and ctx().close_incident and ctx().found_recurrence }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
          - error_message: "See work log for details."
        do:
          - itsm_escalate_recurrence
      - when: "{{ not ctx().run_error_uptime and ctx().uptime_days >= ctx().uptime_threshold and not ctx().close_incident }}"
        publish:
          - end_timestamp: "{{ task('itsm_update_uptime').end_timestamp }}"
        do:
          - db_dispatch
      - when: "{{ ctx().run_error_uptime }}"
        publish:
          - error_message: "Automation failed to fetch uptime of ci {{ ctx().ci_address }}"
        do:
          - itsm_escalate

  itsm_escalate_recurrence:
    action: ntt_itsm.itsm_incident_update
    input:
      escalate: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: |
        Automation is escalating this incident as it was unable to resolve it and due to recurring incidents.

        {{ ctx().error_message }}
    next:
      - when: "{{ succeeded() }}"
        publish:
          - am_status: "Failure"
        do:
          - db_dispatch
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
          - run_error: true
        do:
          - db_dispatch

  itsm_close:
    action: ntt_itsm.itsm_incident_update
    input:
      close: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: "Automation is resolving the incident. See work log for details."
    next:
      - when: "{{ succeeded() }}"
        publish:
          - am_status: "Success"
        do:
          - db_dispatch
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - db_dispatch

  itsm_escalate:
    action: ntt_itsm.itsm_incident_update
    input:
      escalate: true
      inc_id: "{{ ctx().inc_sys_id }}"
      notes: |
        Automation is escalating this incident as it was unable to resolve it.

        {{ ctx().error_message }}
    next:
      - when: "{{ succeeded() }}"
        publish:
          - am_status: "Failure"
        do:
          - db_dispatch
      - when: "{{ failed() }}"
        publish:
          - error_message: "Unable to update the ITSM incident {{ ctx().inc_number }}!"
        do:
          - db_dispatch

  db_dispatch:
    action: core.noop
    next:
      - when: "{{ succeeded() and not ctx().insert_db and not ctx().close_incident and not ctx().run_error }}"
        do:
          - noop
      - when: "{{ succeeded() and not ctx().insert_db and not ctx().close_incident and ctx().run_error }}"
        do:
          - fail
      - when: "{{ succeeded() and not ctx().insert_db and ctx().close_incident }}"
        do:
          - update_kv_var
      - when: "{{ succeeded() and ctx().insert_db }}"
        publish:
          - end_timestamp: "{{ task('db_dispatch').end_timestamp }}"
        do:
          - insert_db

  insert_db:
    action: ntt_monitoring.sql_insert
    input:
      metric_data:
        Description: "unreachable_to_ping"
        Status: "{{ 'Failure' if ctx().run_error else 'Success' }}"
      process_data:
        Account_Name: "{{ ctx().customer_name }}"
        AM_Desc: |
          {% if ( ctx().check_uptime and not ctx().run_error ) %}
          Device is online and uptime value is: {{ ctx().uptime_days }} days
          {% endif %}
          {% if ctx().run_error %}
          {{ ctx().error_message }}
          {% endif %}
        AM_Status: "{{ 'Failure' if ctx().run_error else 'Success' }}"
        Configuration_Item: "{{ ctx().ci_address }}"
        ITSM_Name: "servicenow"
        Job_ID: <% ctx(st2).action_execution_id %>
        Module_Name: "unreachable_to_ping"
        Ref_No: "{{ ctx().inc_number }}"
        Tower_Name: "{{ ctx().os_type }}"
        Assignment_Group: "{{ ctx().assignment_group }}"
        Short_Desc: "{{ ctx().short_desc }}"
        Detail_Desc: "{{ ctx().detailed_desc }}"
      end_timestamp: "{{ ctx().end_timestamp }}"
      start_timestamp: "{{ ctx().start_timestamp }}"
      account_name: "{{ ctx().customer_name }}"
      account_service: "{{ ctx().customer_name }}"
      incident_id: "{{ ctx().inc_number }}"
      configuration_item: "{{ ctx().ci_address }}"
    next:
      - when: "{{ succeeded() and ctx().close_incident and not ctx().run_error and ctx().am_status == 'Success' }}"
        do:
          - update_kv_var
      - when: "{{ succeeded() and ctx().close_incident and ctx().run_error }}"
        do:
          - noop
      - when: "{{ succeeded() and not ctx().close_incident and not ctx().run_error }}"
        do:
          - noop
      - when: "{{ succeeded() and not ctx().close_incident and ctx().run_error }}"
        do:
          - fail
      - when: "{{ failed() }}"
        publish:
          - error_message: "There was an error inserting into the database. Please see the execution for details."
        do:
          - fail

  update_kv_var:
    action: ntt_itsm.itsm_processing_incs_remove
    input:
      inc_id: "{{ ctx().inc_number }}"
    next:
      - when: "{{ succeeded() and not ctx().run_error }}"
        do:
          - noop
      - when: "{{ succeeded() and ctx().run_error }}"
        do:
          - fail
